	
Tips :- 

    1. String/ array will be given 
	2. We will take i and j, usually these are end indices
	3. Try to break it at k -> function call fun(i,k) and fun(k+1,j) these will bring temp answers.
	4. Move k value -> again function call fun(i,k) and fun(k+1,j) these will bring temp answers. 
	5. And so onn.
	6. Using these temp answers , we will use some fun like max min etc. and will get the answer.
 





General Format :- 

        int solve(int[] a,int I,int j){
            If(i>j) return 0;
            for(int k=i;k<=j;k++){
                tempAns = solve(i,k) + solve(k+1,i);
                ans = max(ans,tempAns);
            }
            return ans;
        }

    // loop and max/min depends on ques ask
 



Steps :-

    1. Find i and j
            Determine the range you are solving for
            Usually: dp[i][j] â†’ answer for subarray/substring from i to j
    2. Find base condition
            When i == j (1 element), or length = 0
            Set dp[i][j] = 0 or some cost, depending on problem
    3. Find k loop scheme (partition point)
            Try every partition point between i and j:
            for (int k = i; k < j; k++)
            OR sometimes: for (int k = i+1; k <= j; k++)
    4. Calculate answer from temporary answers
            Recurrence:
            dp[i][j] = min(dp[i][k] + dp[k+1][j] + cost(i,j))
            Use a temp variable to store best/min/max result


Base Condition :-

1. Think of smallest valid input
2. Think of smallest invalid input

