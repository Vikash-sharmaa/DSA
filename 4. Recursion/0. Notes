Recursion Concepts
	1. Recursion & Decision Making:
		○ When solving problems that involve decisions, recursion is often the best approach.
		○ Decision Space → Think Recursion.
		○ Choices + Decision = Recursion.
		○ Recursion breaks problems into smaller subproblems.
	2. Recursive Tree Representation:
		○ A recursive tree helps visualize decisions and how function calls stack.
		○ The number of branches represents the number of choices at each step.
		○ Drawing a recursive tree makes it easier to write the recursive code.
	3. Function Calls & Call Stack:
		○ Each recursive call gets pushed onto the call stack.
		○ The function remains in the stack until it completes execution.
		○ Once completed, the function is popped from the stack, and execution resumes from where it was called.
		○ Calling a function multiple times creates separate calls in the stack.
	4. Base Condition (Stopping Criteria):
		○ Essential to prevent infinite recursion.
		○ Breaks recursion when a known answer is reached.
		○ If missing, causes Stack Overflow Error.
	5. Recursive vs. Iterative Solutions:
		○ Recursive solutions can be converted into iterative ones and vice versa.
		○ Identify if a problem can be solved by breaking it into smaller problems.

Types of Recursion & Relations
	1. Linear Recursion:
		○ Example: Fibonacci sequence using fib(n) = fib(n-1) + fib(n-2).
		○ Slower execution.
	2. Divide & Conquer Recursion:
		○ Example: Binary Search.
		○ Faster compared to linear recursion.

Working with Variables in Recursion
	1. Returning Function Call:
		○ If the method has a return type, ensure the function call itself is returned.
	2. Passing Arguments:
		○ If a variable must be used in future recursive calls, pass it as an argument.
		○ If a variable is only needed in the current function call, keep it in the function body.
	3. Primitive vs. Non-Primitive Arguments:
		○ Primitive types (int, float, boolean): Changes do not reflect in the calling function.
		○ Non-primitive types (Arrays, Strings, Lists): Changes are reflected globally in the recursion stack.


Steps to Solve Recursion Problems
	1. Break the problem into smaller subproblems.
	2. Write the recurrence relation (if needed).
	3. Draw the recursive tree:
		○ Understand the flow of function calls and how they stack.
		○ Identify left and right recursive calls.
		○ Use pen & paper for visualization.
		○ Debug using a tracing tool.
	4. Analyze return values at each step:
		○ Identify where the function call exits.


Tips for Writing Recursive Code
	1. Executing code after recursion call → Runs while stack is emptying.

        Fun(n-1);
        System.out.println(n);  // Runs after recursive calls finish
        
	2. Executing code before recursion call → Runs while stack is filling.

        System.out.println(n);  // Runs before making recursive calls
        Fun(n-1);

	3. Avoid infinite loops:
		○ fun(n--) → Causes infinite recursion.
		○ fun(--n) → Passes n-1, reducing the input.
	4. Handling primitive vs. non-primitive arguments:
		○ If passing an array, all recursive calls share the same reference.
		○ Modifying the array affects all future calls.

Common Recursive Problems

1️⃣ Counting Digits in a Number

	int countDigits(int n) {
    if (n == 0) return 0;
    return 1 + countDigits(n / 10);
}

	Formula: Digits in number = (int) Math.log10(n) + 1

2️⃣ Returning a Count from Recursion

	int countZeros(int n, int res) {
    if (n == 0) return res;
    if (n % 10 == 0) res++;
    return countZeros(n / 10, res);
}
	Key Takeaway: Use an argument to accumulate the count.

3️⃣ Returning a List in Recursion
	Method 1: Pass List as an Argument (Same object reference)
	
	static List<Integer> findIndices(int[] arr, int i, int target, List<Integer> res) {
    if (i == arr.length) return res;
    if (arr[i] == target) res.add(i);
    return findIndices(arr, i + 1, target, res);
}
	
	The same list object is modified across all recursive calls.
	
	
	Method 2: Create a New List in Each Call (Independent results)
	
	static List<Integer> findIndices(int[] arr, int i, int target) {
    if (i == arr.length) return new ArrayList<>();
    List<Integer> res = findIndices(arr, i + 1, target);
    if (arr[i] == target) res.add(i);
    return res;
}
             
            Different lists are created at each recursive call.





Mool Mantra :-

For Base Conditions :-
	1. Think of the answer for the smallest input.
	2. Keep in mind that , at any point of time of execution, the array does not go Out of bound.


Keep one think in mind - I will do for the curent one - others - rec will give me the answer , dont think how.